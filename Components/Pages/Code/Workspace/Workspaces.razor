@page "/code/workspaces"
@using Radzen
@using Radzen.Blazor
@using System.Globalization
@using TFGDevopsApp1.Components.Account.Shared
@using TFGDevopsApp1.Core.Models.Result
@using TFGDevopsApp1.Dto.Plastic.Workspaces
@using TFGDevopsApp1.Dtos.Plastic.Repositories
@using TFGDevopsApp1.Dtos.Plastic.Workspaces
@using TFGDevopsApp1.Interfaces
@inject NavigationManager NavigationManager
@inject IPlasticServices plasticServices

<style>
    .rz-grid-table {
        width: unset;
    }
</style>

<ErrorBoundary>
    <div class="row">
        <div class="col-md-10">
            <StatusMessage Message="@Message" />
            <RadzenText Style="font-family:monospace; font-size:xx-large" Text="Workspaces" />
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px" class="mt-2 mb-4">
                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Text="Crear Workspace" Click="@OnCreate" Disabled="@(editMode == DataGridEditMode.Single && workspaceToInsert.Count() > 0)" />
              @*          <RadzenSelectBar @bind-Value="@editMode" TextProperty="Text" ValueProperty="Value" style="margin-right: 16px"
                                     Data="@(Enum.GetValues(typeof(DataGridEditMode)).Cast<DataGridEditMode>().Select(t => new { Text = $"{t}", Value = t }))" Size="Radzen.ButtonSize.Small"
                                 Disabled="@(editMode == DataGridEditMode.Multiple && workspaceToInsert.Count() > 1)" />  *@
            </RadzenStack>
            <RadzenDataGrid @ref="WorkspaceGrid" 
                            AllowAlternatingRows="false" 
                            AllowFiltering="true" 
                            AllowPaging="true" 
                            PageSize="5" 
                            AllowSorting="true" 
                            EditMode="@editMode"
                            Data="@WorkspacesRequest"
                            TItem="WorkspaceResponseDto"
                            RowUpdate="@OnUpdateRow" 
                            RowCreate="@OnCreateRow" 
                            Sort="@Reset" 
                            Page="@Reset" 
                            Filter="@Reset" 
                            ColumnWidth="5000px">
                <Columns>
                    <RadzenDataGridColumn 
                            Property="Name" 
                            Title="Name" 
                            Width="120px" 
                            Frozen="true" />
                    <RadzenDataGridColumn 
                            Property="Path" 
                            Title="Path" 
                            Width="280px">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn 
                            Property="MachineName"
                            Title="MachineName"
                            Width="220px">
                    </RadzenDataGridColumn>
                     <RadzenDataGridColumn 
                                Context="Workspace" 
                                Filterable="false" 
                                Sortable="false" 
                                Title="Acciones"
                                TextAlign="TextAlign.Center" 
                                Frozen="true"
                                FrozenPosition="FrozenColumnPosition.Right">
                        <Template Context="Workspace">
                            <RadzenButton Icon="account_balance_wallet"
                                ButtonStyle="ButtonStyle.Light"
                                Variant="Variant.Flat"
                                          Size="Radzen.ButtonSize.Medium"
                                          Click="@(args => NavigateToRepositories(Workspace))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            <RadzenButton Icon="edit" 
                                ButtonStyle="ButtonStyle.Light" 
                                Variant="Variant.Flat"
                                          Size="Radzen.ButtonSize.Medium"
                                          Click="@(args => UpdateRow(Workspace))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" 
                                Icon="delete" 
                                Variant="Variant.Flat" 
                                Shade="Shade.Lighter"
                                          Size="Radzen.ButtonSize.Medium" class="my-1 ms-1"
                                Click="@(args => DeleteRow(Workspace))" 
                               >
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="Workspace">
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="Radzen.ButtonSize.Medium" Click="@((args) => SaveRow(Workspace))" aria-label="Save">
                            </RadzenButton>
                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="Radzen.ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(Workspace))" aria-label="Cancel">
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="Radzen.ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(Workspace))" aria-label="Delete">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </div>
    </div>
</ErrorBoundary>



@code 
{
    [SupplyParameterFromForm]
    private WorkspaceRequestDto Workspace { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string Message { get; set; }

    RadzenDataGrid<WorkspaceResponseDto> WorkspaceGrid;
    DataGridEditMode editMode = DataGridEditMode.Single;

    List<WorkspaceResponseDto> WorkspacesRequest;

    List<WorkspaceResponseDto> workspaceToInsert = new List<WorkspaceResponseDto>();
    List<WorkspaceResponseDto> workspaceToUpdate = new List<WorkspaceResponseDto>();

    void Reset()
    {
        workspaceToInsert.Clear();
        workspaceToUpdate.Clear();
    }

    void DeleteRow(WorkspaceResponseDto workspace)
    {
        //await workspaceToDelete.DeleteRow(workspace);
    }

    void SaveRow(WorkspaceResponseDto workspace)
    {

    }

    void CancelEdit(WorkspaceResponseDto workspace)
    {
        Reset(workspace);
    }

    void Reset(WorkspaceResponseDto workspace)
    {
        workspaceToInsert.Remove(workspace);
        workspaceToUpdate.Remove(workspace);
    }

    async Task NavigateToRepositories(WorkspaceResponseDto workspace)
    {
        NavigationManager.NavigateTo($"/code/repository/{workspace.Name}");
    }

    async Task UpdateRow(WorkspaceResponseDto workspace)
    {
        NavigationManager.NavigateTo("/code/workspace/update");
    }


    void OnCreateRow(WorkspaceResponseDto workspace)
    {
        NavigationManager.NavigateTo("/code/workspace/create");
     
    }

    void OnUpdateRow(WorkspaceResponseDto workspace)
    {
        Reset(workspace);
    }

    async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var workspace = new WorkspaceRequestDto();
        //workspaceToInsert.Add(workspace);
        //await workspaceToInsert.InsertRow(workspace);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var workspace = await plasticServices.GetWorkSpacesAsync("api/v1/wkspaces");
        WorkspacesRequest = workspace.Data;
    }

    private async Task OnCreate()
    {
        var response = new Result<bool>();

        try
        {
            NavigationManager.NavigateTo($"/code/workspaces/create");
            // response = await plasticServices.CreateWorkSpaceAsync(Workspace);

            // if (response.Data)
            //     Message = response.Message;
        }
        catch (Exception ex)
        {
            Message = "Error: " + response.Message + " - " + ex.Message + "-" +
                      ex.InnerException?.Message;
        }
    }

}
