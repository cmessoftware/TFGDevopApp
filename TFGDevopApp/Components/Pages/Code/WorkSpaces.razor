@page "/code/workspaces"
@using Radzen
@using Radzen.Blazor
@using TFGDevopsApp.Interfaces
@using TFGDevopsApp.Core.Models.Plastic
@inject IPlasticServices plasticServices
@inject NavigationManager NavigationManager

<style>
    .rz-grid-table {
        width: unset;
    }
</style>

<Header Title="WorkSpaces">
    <div class="rz-grid-table mb-10"></div>
</Header>

<ErrorBoundary>
    <RadzenDataGrid @ref="grid" AllowFiltering="true" AllowColumnResize="true"
                    FilterMode="FilterMode.Advanced" PageSize="5" AllowPaging="true" AllowSorting="true" 
                    Data="@workspaces" 
                    TItem="WorkspaceResponseDto" ColumnWidth="300px"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterCleared=@FilterCleared
                    LogicalFilterOperator="LogicalFilterOperator.Or" FilterPopupRenderMode="PopupRenderMode.OnDemand">
        <Columns>
            <RadzenDataGridColumn TItem="WorkspaceResponseDto" Property="Guid" Title="Guid" />
            <RadzenDataGridColumn TItem="WorkspaceResponseDto" Property="Name" Title="Nombre" />
            <RadzenDataGridColumn TItem="WorkspaceResponseDto" Property="MachineName" Title="Servidor" />
            <RadzenDataGridColumn TItem="WorkspaceResponseDto" Title="Acciones">
                <Template Context="workSpaces">
                    <RadzenButton Click="@(() => NavigateTo())"
                                  Icon="dashboard"
                                  ButtonStyle="ButtonStyle.Light"
                                  Variant="Radzen.Variant.Filled"
                                  Size="ButtonSize.Medium"
                                  Style="width:auto">
                    </RadzenButton>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</ErrorBoundary>

@code {
   
    RadzenDataGrid<WorkspaceResponseDto> grid;
    List<WorkspaceResponseDto> workspaces;
    IEnumerable<string> selectedTitles;
    IEnumerable<string> selectedSecondTitles;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var workspace = await plasticServices.GetWorkSpacesAsync("api/v1/wkspaces");
        workspaces = workspace.Data;
    }

    private void NavigateTo()
    {
         NavigationManager.NavigateTo($"/code/repositories");
    }


    async Task OnSelectedTitlesChange(object value)
    {
        if (selectedTitles != null && !selectedTitles.Any())
        {
            selectedTitles = null;
        }

        await grid.FirstPage();
    }

    async Task OnSelectedSecondTitlesChange(object value)
    {
        if (selectedSecondTitles != null && !selectedSecondTitles.Any())
        {
            selectedSecondTitles = null;
        }

        await grid.FirstPage();
    }

    async Task FilterCleared()
    {
        selectedTitles = null;
        selectedSecondTitles = null;
        await grid.FirstPage();
    }
}