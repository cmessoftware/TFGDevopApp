@page "/Account/RegisterNew"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Logging
@using Radzen
@using Radzen.Blazor
@using TFGDevopsApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<RadzenCard class="rz-my-1 rz-mx-auto rz-p-4 rz-p-md-12" style="max-width: 1000px;">
    <div class="col-lg-6 offset-lg-3">
        <RadzenTemplateForm TItem="InputModel" Submit=@(input => OnRegisterUser(input))>
            <RadzenFieldset Text="Registrar usuario" Style="font-family:Arial">
                <div class="row mb-5">
                    <div class="col-md-4" style="align-self: center;">
                        <RadzenLabel Text="Email" Component="Email" />
                    </div>
                    <div class="col">
                        <RadzenTextBox style="display: block" Name="Email" @bind-Value=@Model.Email class="w-100" />
                        <RadzenRequiredValidator Component="Email" Text="Email es obligatorio" Popup=@popup Style="position: absolute" />
                        <RadzenEmailValidator Component="Email" Text="Cargar un email válido" Popup=@popup Style="position: absolute" />
                    </div>
                </div>
                <div class="row mb-5">
                    <div class="col-md-4" style="align-self: center;">
                        <RadzenLabel Text="Usuario" Component="Usuario" />
                    </div>
                    <div class="col">
                        <RadzenTextBox style="display: block" Name="Usuario" @bind-Value=@Model.UserName class="w-100" />
                        <RadzenRequiredValidator Component="Usuario" Text="El usuario es obligatorio" Popup=@popup Style="position: absolute" />
                    </div>
                </div>
                <div class="row mb-5">
                    <div class="col-md-4" style="align-self: center;">
                        <RadzenLabel Text="Clave" Component="Password" />
                    </div>
                    <div class="col">
                        <RadzenPassword style="display: block" Name="Password" @bind-Value=@Model.Password class="w-100" />
                    </div>
                </div>
                <div class="row mb-5">
                    <div class="col-md-4" style="align-self: center;">
                        <RadzenLabel Text="Confirmar Clave" Component="Password" />
                    </div>
                    <div class="col">
                        <RadzenPassword style="display: block" Name="Email" @bind-Value=@Model.ConfirmPassword class="w-100" />
                        <RadzenRequiredValidator Component="Password"  Text="La clave es obligatoria" Popup=@popup Style="position: absolute" />
                    </div>
                </div>
                <RadzenButton ButtonType="ButtonType.Submit" Text="Registrar"></RadzenButton>
            </RadzenFieldset>
        </RadzenTemplateForm>
    </div>
</RadzenCard>


@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Model { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private bool popup = true;

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    
    public async Task OnRegisterUser(InputModel input)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Model.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Model.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Model.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Model.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Model.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    public sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Display(Name = "User Name")]
        public string UserName { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
