@page "/account/loginNew"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@using Microsoft.AspNetCore.WebUtilities
@using Radzen
@using System
@using Radzen.Blazor
@using System.Text
@using System.Text.Encodings.Web
@using System.ComponentModel.DataAnnotations
@using TFGDevopsApp.Data
@using TFGDevopsApp.Interfaces
@using TFGDevopsApp.Infraestructure.Entity.Login
@using TFGDevopsApp.Components.Account
@using TFGDevopsApp.Components.Pages.Shared
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IUserRepository UserRepository



<RadzenCard class="rz-my-12 rz-mx-auto rz-p-4 rz-p-md-12" style="max-width: 600px;">
<RadzenStack />
    <RadzenTemplateForm Data=@("LoginWithDefaultValues")>
        <RadzenLogin AllowRegister="false"
                        AllowResetPassword="false"
                        Username=@Input.Email Password=@Input.Password
                        AllowRememberMe="true" RememberMe="@Input.RememberMe"
                        Login=@OnLoginUser />
    </RadzenTemplateForm>
</RadzenCard>
 
@if (!string.IsNullOrEmpty(errorMessage))
{
    <RadzenAlert Title="@errorMessage" AlertStyle=AlertStyle.Danger></RadzenAlert>
}


@* <EventConsole @ref=@console /> *@

@code {

    //EventConsole console = new EventConsole;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private ApplicationUser User { get; set; }

    private IEnumerable<IdentityError>? identityErrors;

    private bool showRegister = false;

    string? errorMessage = string.Empty;

    private bool popup = true;

    protected override async Task OnInitializedAsync()
    {

        if (HttpContext != null && HttpMethods.IsGet(HttpContext.Request.Method))
        {

            //var msg = "Clear the existing external cookie to ensure a clean login process";
            //console.Log(msg, AlertStyle.Info);
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task OnLoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }


    void OnResetPassword(string value, string name)
    {
        //console.Log($"{name} -> ResetPassword for user: {value}");
    }

    protected async Task OnRegisterUser()
    {
        showRegister = true;
        RedirectManager.RedirectTo("Account/Register");

        //     var user = await CreateUserAsync();

        //     await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        //     var result = await UserManager.CreateAsync(user, Input.Password);

        //     if (!result.Succeeded)
        //     {
        //         identityErrors = result.Errors;
        //         return;
        //     }

        //     Logger.LogInformation("User created a new account with password.");

        //     var userId = await UserManager.GetUserIdAsync(user);
        //     var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        //     code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

        //     await SignInManager.SignInAsync(user, isPersistent: false);
        //     RedirectManager.RedirectTo(ReturnUrl);
    }

    private async Task CreateUserAsync()
    {
        try
        {
            User = await UserRepository.RegisterUser(Input.Email, Input.Password);
        }
        catch
        {
            throw new InvalidOperationException($"No se puede creare '{nameof(ApplicationUser)}'. ");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }


    protected sealed class InputModel
    {

        public string ConfirmPassword { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
