
@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Web;
@using Radzen
@using Radzen.Blazor
@using TFGDevopsApp.Components.Pages.Shared
@using TFGDevopsApp.Components.Layout
@inject NavigationManager NavigationManager

<RadzenComponents />

<RadzenLayout style="grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body';">
        <RadzenHeader>
            <RadzenRow JustifyContent="JustifyContent.End" AlignItems="AlignItems.Center" Gap="0">
                <RadzenColumn Size="2">
                   <LoginDisplay />
                </RadzenColumn>
            </RadzenRow>
        </RadzenHeader>
        <RadzenBody Expanded="@SidebarExpanded">
            <RadzenRow class="rz-mx-auto rz-px-4 rz-pt-2 rz-pt-md-4 rz-pt-lg-6 rz-pt-xl-12 rz-pb-2 rz-pb-lg-12" Style="max-width: 1440px;">
                <RadzenColumn Size="3">
                    <NavBar />
                </RadzenColumn>
                <RadzenColumn Size="9">
                          @Body
                    <ErrorBoundary>
                        <ErrorContent Context="Exception">
                            <div class="alert-danger">
                                @Exception.Message<br />
                                @Exception.StackTrace
                                <br />
                            </div>
                        </ErrorContent>
                    </ErrorBoundary>
                    <RadzenContent>
                    <RadzenButton Icon="arrow_back" Text="Volver" Click="@(() => Return())" class="rz-button rz-button-danger"></RadzenButton>
                    </RadzenContent>
                </RadzenColumn>
            </RadzenRow>
        </RadzenBody>
</RadzenLayout>
    

  

@code {

        [Parameter]
        public string PreviuosPath { get; set; }

        [Parameter]
        public bool IsAuthenticated { get; set; } = false;

        [Parameter]
        public string DefaultWorkSpaceName { get; set; } = "DefaultWorkSpaceName";

        public bool SidebarExpanded { get; set; } = true; 
        public bool SidebarCollapsed { get; set; } = false;

        protected override void OnInitialized()
        {
            base.OnInitialized();
        }

        private void SidebarToggleClick()
        {
            SidebarExpanded = !SidebarExpanded;
            SidebarCollapsed = !SidebarCollapsed;
        }

        private void Return()
        {
             NavigationManager.NavigateTo("/");
        }
    }