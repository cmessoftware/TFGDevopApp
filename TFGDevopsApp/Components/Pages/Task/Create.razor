@page "/code/task/create"
@using Radzen
@using Radzen.Blazor
@using System.Globalization
@using TFGDevopsApp.Components.Account.Shared
@using TFGDevopsApp.Core.Helpers
@using TFGDevopsApp.Core.Models.Result
@using TFGDevopsApp.Dtos.Mantis.Category
@using TFGDevopsApp.Dtos.Mantis.Issues
@using TFGDevopsApp.Dtos.Plastic.Repositories
@using TFGDevopsApp.Interfaces
@inject IMantisServices mantisServices

<ErrorBoundary>
    <div class="row">
        <div class="col-md-4" />
        <div class="col-md-4">
            <StatusMessage Message="@Message" />
            <RadzenText Style="font-family:monospace; font-size:xx-large" Text="Crear Tarea" />
            <EditForm Model="TaskRequest" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="OnCreate" FormName="createTask" >
                <DataAnnotationsValidator />
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="TaskRequest.Issue.Summary" class="form-control" autocomplete="name" aria-required="true" placeholder="Resumen" />
                    <label for="Summary">Summary</label>
                    <ValidationMessage For="() => TaskRequest.Issue.Summary" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="TaskRequest.Issue.Description" class="form-control" autocomplete="comment" aria-required="true" placeholder="Description" />
                    <label for="Description">Description</label>
                    <ValidationMessage For="() => TaskRequest.Issue.Description" class="text-danger" />
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Crear</button>
            </EditForm>
        </div>
        <div class="col-md-4" />
    </div>
</ErrorBoundary>



@code {
    [SupplyParameterFromForm]
    private TaskCreateRequestDto TaskRequest { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string Message { get; set; }

    private List<TaskCategoryResponseDto> Categories { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var categories = await mantisServices.GetCategories();
        Categories = categories.Data;
    }

    private void OnChange(object value)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        Console.WriteLine($"Value changed to {str}");
    }

    private async Task OnCreate()
    {
        var response = new Result<TaskCreateResponseDto>();

        try
        {
            string path = "issues";
            response = await mantisServices.CreateTaskAsync(TaskRequest,path);

            if (response != null && response.Data != null)
                Message = response.Message;
        }
        catch (Exception ex)
        {
            Message = "Error: " + response.Message + " - " + ex.Message + "-" + 
                      ex.InnerException?.Message; 
        }
    }

}
