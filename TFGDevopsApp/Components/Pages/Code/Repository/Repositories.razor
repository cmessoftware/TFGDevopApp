@page "/code/repositories"
@using AutoMapper
@using Radzen
@using Radzen.Blazor
@using System.Globalization
@using TFGDevopsApp.Components.Account.Shared
@using TFGDevopsApp.Core.Models.Result
@using TFGDevopsApp.Dtos.Plastic.Repositories
@using TFGDevopsApp.Interfaces
@inject IPlasticServices plasticServices
@inject NavigationManager NavigationManager
@inject IMapper mapper

<style>
    .rz-grid-table {
        width: unset;
    }
</style>

<ErrorBoundary>
    <div class="row">
        <div class="col-md-10">
            <StatusMessage Message="@Message" />
            <RadzenText Style="font-family:monospace; font-size:xx-large" Text="Repositorios" />
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px" class="mt-2 mb-4">
                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Text="Crear Repositorio" Click="@OnCreate" Disabled="@(repositoryToInsert.Count() > 0)" />
                @* <RadzenSelectBar @bind-Value="@editMode" TextProperty="Text" ValueProperty="Value" style="margin-right: 16px"
                                 Data="@(Enum.GetValues(typeof(DataGridEditMode)).Cast<DataGridEditMode>().Select(t => new { Text = $"{t}", Value = t }))" Size="Radzen.ButtonSize.Small"
                                 Disabled="@(repositoryToInsert.Count() > 1)" /> *@
            </RadzenStack>
            <RadzenDataGrid @ref="RepositoryGrid"
                            AllowAlternatingRows="false"
                            AllowFiltering="true"
                            AllowPaging="true"
                            PageSize="5"
                            AllowSorting="true"
                            EditMode="@editMode"
                            Data="@RepositoriesResponse"
                            TItem="RepositoryResponseDto"
                            RowUpdate="@OnUpdateRow"
                            RowCreate="@OnCreate"
                            Sort="@Reset"
                            Page="@Reset"
                            Filter="@Reset"
                            ColumnWidth="5000px">
                <Columns>
                    <RadzenDataGridColumn Property="name"
                                          Title="Name"
                                          Width="500px"
                                          Frozen="true" />
                    <RadzenDataGridColumn Property="owner.name"
                                          Title="Owner"
                                          Width="500px">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Context="repos"
                                          Filterable="false"
                                          Sortable="false"
                                          Title="Acciones"
                                          TextAlign="TextAlign.Center"
                                          Frozen="true"
                                          FrozenPosition="FrozenColumnPosition.Right">
                        <Template Context="repos">
                            <RadzenButton Icon="account_balance_wallet"
                                          ButtonStyle="ButtonStyle.Light"
                                          Variant="Variant.Flat"
                                          Size="Radzen.ButtonSize.Medium"
                                          Click="@(args => NavigateToRepository(repos))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            <RadzenButton Icon="edit"
                                          ButtonStyle="ButtonStyle.Light"
                                          Variant="Variant.Flat"
                                          Size="Radzen.ButtonSize.Medium"
                                          Click="@(args => EditRow(repos))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Danger"
                                          Icon="delete"
                                          Variant="Variant.Flat"
                                          Shade="Shade.Lighter"
                                          Size="Radzen.ButtonSize.Medium" class="my-1 ms-1"
                                          Click="@(args => DeleteRow(repos))">
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="repos">
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="Radzen.ButtonSize.Medium" Click="@((args) => NavigateToRepository(repos))" aria-label="Save">
                            </RadzenButton>
                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="Radzen.ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(repos))" aria-label="Cancel">
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="Radzen.ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(repos))" aria-label="Delete">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </div>
    </div>
</ErrorBoundary>

@code {
    private List<RepositoryResponseDto> RepositoriesResponse;
    private RadzenDataGrid<RepositoryResponseDto> RepositoryGrid;
    private string Message;
    private DataGridEditMode editMode = DataGridEditMode.Single;

    List<RepositoryResponseDto> repositoryToInsert = new List<RepositoryResponseDto>();
    List<RepositoryResponseDto> repositoryToUpdate = new List<RepositoryResponseDto>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var repos = plasticServices.GetRepositoriesAsync("api/v1/repos");
        RepositoriesResponse = repos.Result.Data;

    }

    void Reset()
    {
        repositoryToInsert.Clear();
        repositoryToUpdate.Clear();
    }

    void DeleteRow(RepositoryResponseDto repo)
    {
        //await repoToDelete.DeleteRow(repo);
    }

    void SaveRow(RepositoryResponseDto repo)
    {

    }

    void CancelEdit(RepositoryResponseDto repo)
    {
        Reset(repo);
    }

    void Reset(RepositoryResponseDto repo)
    {
        repositoryToInsert.Remove(repo);
        repositoryToUpdate.Remove(repo);
    }

    async Task NavigateToRepository(RepositoryResponseDto repo)
    {
        NavigationManager.NavigateTo($"/code/repository/{repo.name}");
    }

    async Task EditRow(RepositoryResponseDto repo)
    {
        repositoryToUpdate.Add(repo);
        // await repositoryToUpdate.EditRow(repo);
    }


    void OnCreate(RepositoryResponseDto repo)
    {

    }

    void OnUpdateRow(RepositoryResponseDto repo)
    {
        Reset(repo);
    }

    private async Task OnCreate()
    {
        var response = new Result<bool>();

        try
        {
            NavigationManager.NavigateTo($"/code/repository/create");
            // response = await plasticServices.CreateWorkSpaceAsync(Workspace);

            // if (response.Data)
            //     Message = response.Message;
        }
        catch (Exception ex)
        {
            Message = "Error: " + response.Message + " - " + ex.Message + "-" +
                      ex.InnerException?.Message;
        }
    }

}
