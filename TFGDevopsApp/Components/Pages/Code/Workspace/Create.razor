@page "/code/workspaces/create"
@rendermode InteractiveServer

@using Radzen
@using Radzen.Blazor
@using TFGDevopsApp.Components.Account.Shared
@using TFGDevopsApp.Dto.Plastic.Workspaces
@using TFGDevopsApp.Dtos.Plastic.Repositories
@using TFGDevopsApp.Dtos.Plastic.Workspaces
@using TFGDevopsApp.Interfaces
@using TFGDevopsApp.Services
@inject IPlasticServices plasticServices
@inject NavigationManager NavigationManager
@* @inject IJSRuntime JSRuntime *@

<style>
    .rz-grid-table {
        width: unset;
    }
</style>


<ErrorBoundary>
    <StatusMessage Message="@Message" />
    <RadzenRow AlignItems="AlignItems.End" Wrap="FlexWrap.Wrap" Gap="1rem" Class="rz-p-sm-12">
        <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
            <RadzenFormField Text="Nombre" Variant="Variant.Text" Style="width: 100%;">
                <RadzenTextBox @bind-Value="@RepoName" Style="width: 100%;" />
            </RadzenFormField>
        </RadzenColumn>
    </RadzenRow>
    <RadzenRow AlignItems="AlignItems.End" Wrap="FlexWrap.Wrap" Gap="1rem" Class="rz-p-sm-12">
        <RadzenStack Style="mb-10">
            <div class="mb-3">
                <div class="row">
                    <RadzenButton Click="@(() => CreateRepository(RepoName))">Agregar Workspace</RadzenButton>
                </div>
            </div>
        </RadzenStack>
    </RadzenRow>
</ErrorBoundary>

@code {


    public string RepoName { get; set; }
    private string Message { get; set; }
    private WorkspaceResponseDto currentWorkspace;

    RadzenDataGrid<WorkspaceResponseDto> grid;
    List<WorkspaceResponseDto> workspaces;
    IEnumerable<string> selectedTitles;
    IEnumerable<string> selectedSecondTitles;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var workspace = await plasticServices.GetWorkSpacesAsync("api/v1/wkspaces");
        workspaces = workspace.Data;
    }

    public void OnRowClick(EventArgs args)
    {
        //currentWorkspace = args;
    }

    public async Task OnRemove()
    {
        var path = $"api/v1/wkspaces/{currentWorkspace.Name}";
        var response = await plasticServices.RemoveWorkSpacesAsync(path);

        if (response.Data)
        {
            Message = "Workspace removed";
        }
    }

    private async Task CreateRepository(string repoName)
    {
        try
        {
            var workspace = new RepositoryCreateRequestDto
                {
                    Name = repoName,
                };

            var response = await plasticServices.CreateRepositoryAsync(workspace);

            if (response.Success)
                Message = response.Message;
            else
                Message = $"Error: {response.Message}";
        }
        catch (Exception ex)
        {
            Message = ex.Message;
        }
    }
    
    async Task OnSelectedTitlesChange(object value)
    {
        if (selectedTitles != null && !selectedTitles.Any())
        {
            selectedTitles = null;
        }

        await grid.FirstPage();
    }

    async Task OnSelectedSecondTitlesChange(object value)
    {
        if (selectedSecondTitles != null && !selectedSecondTitles.Any())
        {
            selectedSecondTitles = null;
        }

        await grid.FirstPage();
    }

    async Task FilterCleared()
    {
        selectedTitles = null;
        selectedSecondTitles = null;
        await grid.FirstPage();
    }
}