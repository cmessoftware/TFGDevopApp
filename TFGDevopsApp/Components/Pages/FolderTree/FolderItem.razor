@page "/foldertree/folderitem/{RepoName}"
@using BlazorMonaco.Editor
@using Radzen
@using AutoMapper
@using Microsoft.Extensions.Logging
@using System.Diagnostics
@using TFGDevopsApp.Common
@using TFGDevopsApp.Common.Enum
@using TFGDevopsApp.Components.Account.Shared
@using TFGDevopsApp.Components.Pages.Code
@using TFGDevopsApp.Core.Helpers
@using TFGDevopsApp.Core.Models.Result
@using TFGDevopsApp.Dtos.Mantis.Issues
@using TFGDevopsApp.Dtos.Mantis.Project
@using TFGDevopsApp.Dtos.Plastic.Build
@using TFGDevopsApp.Dtos.Plastic.Repositories
@using TFGDevopsApp.Dtos.Plastic.Workspaces
@using TFGDevopsApp.Infraestructure.Entity.Mantis
@using TFGDevopsApp.Interfaces
@using System.Linq
@using TFGDevopsApp.Dtos.FolderTree
@using Radzen.Blazor
@using TFGDevopsApp.Services
@inject IPlasticServices plasticServices
@inject IMantisServices mantisServices
@inject IIssueRepository issueRepository    
@inject ExecutableService executableService
@inject IConfiguration configuration
@inject IMapper _mapper
@inject ILogger<FolderItem> _logger
@* @inject IJSRuntime jsRuntime *@
@inject Radzen.DialogService dialogService
@inject NavigationManager NavigationManager

<style>
    .custom-dialog {
        width: 80vw; /* Set the desired width */
    }

        .custom-dialog .rz-dialog {
            max-width: unset; /* Override the default max-width */
        }

</style>

<ErrorBoundary>
    <div class="container">
    <StatusMessage Message="@message">
           @*  @if (string.IsNullOrEmpty(issueLink))
            {
                <RadzenButton Click="NavigateToIssue"></RadzenButton>
            } *@
        </StatusMessage>
    <div class="row">
        <div class="col-12">
            <div class="rz-grid-table-cell">
             <RadzenPanel>
                <RadzenButton Icon="launch" ButtonStyle="ButtonStyle.Light" Click="@(path => OpenProject(""))">Abrir @RepoName</RadzenButton>
           @*      <RadzenTree Data="@FolderTrees"
                            TextProperty="FolderTree.Name"
                            ChildItemsProperty="FolderTree.Children"
                            Expand=@LoadDataAsync
                            Change=@OnNodeChange>
                    <RadzenTreeItem Text="@RepoName">
                        @foreach (var repo in FolderTrees)
                        {
                            <RadzenTreeItem Text="@repo.Name" Expand=@LoadDataAsync>
                                @BuildTreeView(repo)
                            </RadzenTreeItem>
                        }
                    </RadzenTreeItem>
                </RadzenTree>  *@
            </RadzenPanel>
            </div>
        </div>
        <div class="col-8">
            <div class="rz-grid-table-cell">
                    <RadzenPanel>
                        <div class="row">
                            <div class="col-3 px-5">
                                <RadzenButton Name="ChangeSetId" Disabled=@(!EnableChangeSet) Text="Change Set" Click="@(() => RegisterChangeSet())" />
                                <RadzenTextBox Disabled=@IsDisabled Placeholder="ChangeSet" @bind-Value="@ChangeSetId" />
                                <RadzenRequiredValidator Component="ChangeSetId" Text="Ingrese ChangeSetId" />
                            </div>
                            <div class="col-3">
                                <RadzenButton Disabled=@(!EnableRequestRevision) Text="Solicitar Revisión" Click="@(() => RequestRevision())" />
                            </div>
                            <div class="col-3">
                                <RadzenButton Icon="build" Disabled=@(!EnableBuildProject) Text="Compilar proyecto" Click="@(() => BuildProject(RepoName))" />
                            </div>
                            <div class="col-3">
                                <RadzenButton
                                    Disabled=@(!EnableOpenBuildProject)
                                    Icon="open_in_browser"
                                    ButtonStyle="ButtonStyle.Light"
                                    Variant="Variant.Flat"
                                    Size="Radzen.ButtonSize.Medium"
                                    Title="Abrit proyecto publicado" 
                                    Click="@(() => OpenBuilderProject())" />
                            </div>
                        </div>
                    </RadzenPanel>
                    @if (loading)
                    {
                        <RadzenStack AlignItems="AlignItems.Center" Class="rz-m-12" Gap="2rem">
                            <RadzenProgressBarCircular @bind-Value="@loadingValue" />
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Procesando...</RadzenText>
                            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap">
                                <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Light" @bind-Value="@loadingValue" />
                            </RadzenStack>
                        </RadzenStack>
                    }
                </div>
            </div>
        </div>
    </div>
</ErrorBoundary>

@code {

    [Parameter]
    public string RepoName { get; set; }

    public string ProjectName { get; set; }

    private string CodeFileContent  { get; set; }

    private string CodeFileName { get; set; }

    private bool IsFile { get; set; }

    private string? ChangeSetId { get; set; }

    private double loadingValue;
    private bool loading = false;

    private bool IsDisabled { get; set; }
    private bool EnableChangeSet { get; set; } = true;
    private bool EnableRequestRevision { get; set; } = true;
    private bool EnableBuildProject { get; set; } = true;
    private bool EnableOpenBuildProject { get; set; } = false;

    private string message { get; set; }

    private string outputDirectory;

    private string CurrentPath { get; set; }

    private string issueLink { get; set; } = string.Empty;

    private List<RepositoryWorkspace> Repositories { get; set; } = new List<RepositoryWorkspace>();

    private List<FolderTree> FolderTrees { get; set; } = new();
    private List<FolderTree> AllFolderTrees { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadingValue();

    }

    private async Task ShowConfirmDialog(string title, string message)
    {
     var result = await dialogService.OpenAsync(title, ds =>
    @<RadzenStack Gap="1.5rem">
        <p>@message</p>
        <RadzenStack Orientation="Orientation.Horizontal" 
                     Gap="0.5rem" 
                     AlignItems="AlignItems.Center" 
                     JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="width: 80px;" />
                <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            </RadzenStack>
            <RadzenButton Text="Refresh" Click="(() =>  ds.Refresh())" ButtonStyle="ButtonStyle.Light" />
        </RadzenStack>
    </RadzenStack>
       );
    }

    public void EnableAll()
    {
        EnableChangeSet = true;
        EnableRequestRevision = true;
        EnableBuildProject = true;
    }

    public void NavigateToIssue()
    {
        NavigationManager.NavigateTo(issueLink);
    }

    public async Task ShowCode()
    {
        await dialogService.OpenAsync(CodeFileName, ds =>

        @<div class="code-dialog-content">
          <StandaloneCodeEditor Id = "codeReviewId"
            ConstructionOptions = "EditorConstructionOptions" />
             <div class="rz-p-12 rz-text-align-center" style="width:max-content">
               <RadzenText>@CodeFileName</RadzenText>
                <pre>
                   <code class="language-csharp">
                       @CodeFileContent
                     </code>
                 </pre>
                 <RadzenButton Text = "Close" ButtonStyle="ButtonStyle.Secondary" Click=@Close /> 
             </div>
          </div>
    ,
          new Radzen.DialogOptions()    
          {
              CssClass = "language-csharp custom-dialog"
          });
    }

    private async Task LoadingValue()
    {
        if (loading)
        {
            await Task.Delay(500);
            loadingValue += 1;
            if (loadingValue == 100)
            {
                loadingValue = 0;
            }
            await LoadingValue();
        }
    }

    private void RequestRevision()
    {
        CreateRevisionRequestIssue();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //await jsRuntime.InvokeVoidAsync("Prism.highlightAll");
    }

    private async Task RegisterChangeSet()
    {

        CreatePlasticChangeSet();

        CreateChangeSetIssue();
    }

    private async Task BuildProject(string repoName)
    {
        loading = true;
        string pathToCompile = configuration.GetValue<string>(Constants.PathToCompile);
        var workspace = plasticServices.GetWorkSpaceByNameAsync("api/v1/wkspaces", repoName);
        string projectPath = string.Empty;
        Result<BuildResponseDto> result = new();

        if (workspace == null || 
            workspace.Result == null ||
            workspace.Result.Data == null || 
            string.IsNullOrEmpty(workspace.Result.Data.Path))
        {
            message = "Error al obtener el workspace";
            return;
        }
        projectPath = workspace.Result.Data.Path;

        await Task.Run(async () =>
        {
            result = await plasticServices.BuildProject(projectPath, pathToCompile);
            outputDirectory = result.Data.OutputDirectory;

            if (result.Data.BuildStatus == EnumStatus.Success)
            {
                message = $"Proyecto compilado correctamente en {outputDirectory}";
                EnableOpenBuildProject = true;
            }
            else
            {
                message = "Error al compilar el proyecto";
                EnableOpenBuildProject = false;
            }
        });

        loading = false;

    }

    private async Task CreatePlasticChangeSet()
    {

    }

    private async Task CreateChangeSetIssue()
    {
        loading = true;

        if(string.IsNullOrEmpty(ChangeSetId))
        {
            message = "Error: Debe ingresar el ChangeSetId";
            loading = false;
            return;
        }

        var request = new TaskProjectRequestDto()
            {
                Name = RepoName, //Asumismo que el nombre del proyecto en mantis es igual al nombre del repositorio.
                Path = "projects"
            };

        //Creo una tara asociada en mantis.
        string path = "issues";
        var task = new TaskCreateRequestDto(
            new Issue
            {
                Summary = $"ChangeSet repositorio {RepoName}",
                Description = $"ChangeSet repositorio {RepoName} ",
                Project = new Identifier() { Name = RepoName },
                Category = new Identifier() { Name = "General" },
                Priority = new Identifier() { Name = "normal" },
                Severity = new Identifier() { Name = "minor" },
                CustomFields = new List<IssueCustomField>()
                {
                  new IssueCustomField()
                  {
                      Field = new Field() { Name = "changeSetId" },
                      Value = int.Parse(ChangeSetId)
                  }
                }
            },
            EnumIssueType.ChangeSet,
            int.Parse(this.ChangeSetId)

        );

        var response = await mantisServices.CreateTaskAsync(task, path);

        if (response != null && response.Success)
        {
            var issue = response.Data?.Issue;

            issueLink = $"https://mantis.tfg.es/view.php?id={issue?.Id}";

            message = $"Tarea Id: {issue?.Id} - {issue?.Summary} creada correctamente ";

            // Registro la tarea en el repositorio.
            var result = await issueRepository.CreateAsync(new IssueEntity()
                {
                    IssueId = issue?.Id,
                    Summary = issue?.Summary,
                    Description = issue?.Description,

                });

        }
        else
            message = $"Error al crear la tarea: {response?.Message}";

        loading = false;
    }

    private async Task CreateRevisionRequestIssue()
    {
        loading = true;

        if (string.IsNullOrEmpty(ChangeSetId))
        {
            message = "Error: Debe ingresar el ChangeSetId";
            loading = false;
            return;
        }

       
        //Creo una tara asociada en mantis.
        string path = "issues";
        var task = new TaskCreateRequestDto(new Issue
            {
                Summary = $"Revision Request ChangeSet {RepoName}",
                Description = $"ChangeSet repositorio {RepoName} ",
                Project = new Identifier() { Name = RepoName },
                Category = new Identifier() { Name = "General" },
                Priority = new Identifier() { Name = "normal" },
                Severity = new Identifier() { Name = "minor" },
                CustomFields = new List<IssueCustomField>()
                {
                  new IssueCustomField()
                  {
                      Field = new Field() { Name = "changeSetId" },
                      Value = int.Parse(ChangeSetId)
                  }
                }
            },
            EnumIssueType.RequestCodeReview,
            int.Parse(ChangeSetId)
        );

        

        var newIssue = await mantisServices.CreateTaskAsync(task, path);

        if (newIssue != null && newIssue.Success)
        {
            var issue = newIssue.Data?.Issue;

            issueLink = $"https://mantis.tfg.es/view.php?id={issue?.Id}";

            message += $" Tarea {issue?.Id} - {issue?.Summary} creada correctamente";

        }
        else
            message += $"Error al crear la tarea: {newIssue?.Message}";

     
        var changeSetIssue = await mantisServices.GetIssueTrackingByChangeSetId(int.Parse(ChangeSetId));

      
        if (changeSetIssue != null && changeSetIssue.Success)
        {
            path += $"/{changeSetIssue.Data.IssueId}/relationships/";

            //Asocio con la tarea de changeset.
            var result = await mantisServices.PatchTaskAsync(new TaskPatchRequestDto()
            {
                ChangeSetId = int.Parse(ChangeSetId),
                issue = new ParentIssue
                {
                    id = newIssue?.Data?.Issue.Id
                },
                type = new RelationShipType()
                {
                    name = "related-to"
                },
            },
                path
            );

            if (result == null || !result.Success)
            {
                message = $"Error al asociar la tarea de revisión con la tarea de changeset : {result.Message}";
            }
        }
        else
        {
            message = $"Error al obtener la tarea de changeset : {changeSetIssue.Message}";
        }
       
   
       

        loading = false;
    }

    private async Task OpenBuilderProject()
    {
        try
        {
            loading = true;
             
            var process = new Process
                {
                    StartInfo = new ProcessStartInfo
                    {
                        FileName = "explorer",
                        Arguments = $@"{outputDirectory}",
                        RedirectStandardOutput = true,
                        UseShellExecute = false,
                        CreateNoWindow = true
                    }
                };

            process.Start();
            string output = process.StandardOutput.ReadToEnd();
            process.WaitForExit();

            Console.WriteLine(output);
          
            loading = false;

        }
        catch (Exception ex)
        {
            loading = false;
            message = $"Error: {ex.Message}";
        }
      
    }

    private async Task OpenProject(string? path)
    {
        try
        {   loading = true;
            message = string.Empty;
            string branch = "main";
            string executable = "devenv";
            var pathPlasticService = configuration.GetValue<string>(Constants.PlasticBaseUrlKey);
            var workspace = plasticServices.GetWorkSpaceByNameAsync("api/v1/wkspaces",RepoName);
            string phisicalPath = workspace?.Result?.Data?.Path;
            bool launched = false;

            var basePath = $"{pathPlasticService}api/v1/repos/{RepoName}";
            string nextPath = string.Empty;

            if(string.IsNullOrEmpty(path))
                path = $"{basePath}/branches/{branch}/contents";
            else
                path = $"{basePath}/branches/{branch}/contents{path}";

            var folders = await plasticServices.GetFolderTreeAsync(path);


            foreach (var folder in folders.Data.Children)
            {
                if (folder.Path.EndsWith(".sln") && folder.Type == "file")
                {
                    string executeablePath = $"{(phisicalPath + folder.Path).Replace("/", "\\")}";
                    await executableService.ExecuteAsync(executable, $@"{phisicalPath}{folder.Path}");
                    message = $"Proyecto {RepoName} levantado en Visual Studio";
                    launched = true;
                    return;
                }

                nextPath = folder.Path;
            }

            await OpenProject(nextPath);

            loading = false;

        }
        catch (Exception ex)
        {
            loading = false;
            message = $"Error: {ex.Message}";
        }
    }

 
    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = "csharp",
                Value = CodeFileContent
            };
    }

    private void Close()
    {
        dialogService.Close();
    }

    private void LoadSubTrees(List<FolderTree> nodes, int? RequestRevisionId)
    {
        // Get all nodes that are children of the current parentId
        var children = nodes.Where(x => x.RevisionId == RequestRevisionId).ToList();

        foreach (var child in children)
        {
            // Recursively load subtrees for each child
            LoadSubTrees(nodes, child.RevisionId);

            // Find the parent node and add this child to its Children list
            var parent = nodes.FirstOrDefault(x => x.Id == RequestRevisionId);
            if (parent != null)
            {
                parent.Children.Add(child);
            }
        }
    }



    private bool ExcludeFiles(string path, List<string>? excludeFiles)
    {
        bool result = excludeFiles.Exists(x => path.Contains(x));
        return result;
    }

    private RenderFragment BuildTreeView(FolderTree tree) => builder =>
     {
         builder.OpenComponent<RadzenTreeItem>(0);
         builder.AddAttribute(1, "Text", tree.Path);
         builder.AddAttribute(2, "Value", tree);
         builder.AddAttribute(3, "Expand", EventCallback.Factory.Create<TreeExpandEventArgs>(this, LoadDataAsync));
         //builder.AddAttribute(4, "Selected", EventCallback.Factory.Create<TreeEventArgs>(this, OnNodeSelected));
         int sequence = 5;
         if (tree.Children != null && tree.Children.Count > 0)
         {
             builder.AddAttribute(4, "ChildContent", (RenderFragment)((builder2) =>
             {
                 foreach (var child in tree.Children)
                 {
                     builder2.AddContent(sequence++, BuildTreeView(child));
                 }
             }));
         }

         builder.CloseComponent();
     };


    private async Task LoadDataAsync(TreeExpandEventArgs args)
    {
        var items = args.Value as List<FolderTree>;

        if (items == null)
            return;

        foreach(var item in items)
        {
            // Perform the necessary action when the tree item is expanded
            if ( item == null ||  item.Children.Count == 0)
            {
                item.Children = await LoadChildrenAsync(item); 
            }
        }
       
    }

    private async void OnNodeChange(TreeEventArgs args)
    {
        FolderTree selectedNode = args.Value as FolderTree;

        if (selectedNode != null)
        {
            var currentTree = await LoadChildrenAsync(selectedNode);

            FolderTrees = currentTree;
        }
    }


    private async void OnNodeSelected(TreeEventArgs args)
    {
        FolderTree selectedNode = args.Value as FolderTree;

        if (selectedNode != null && selectedNode.Type == "file") //Is a tree leaf.
        {
            var content = await GetFileContentAsync(selectedNode);
            FolderTrees = new List<FolderTree>()
            {
                new FolderTree()
                {
                    Path = selectedNode.Path,
                    Name = selectedNode.Name,
                    Type = selectedNode.Type,
                    ParentTree = selectedNode.ParentTree,
                    Content = content
                }
            };
            IsFile = !string.IsNullOrEmpty(content);    
            CodeFileContent = content;
        }

        if (selectedNode != null && selectedNode.Type == "directory")
        {
            var currentTree = await LoadChildrenAsync(selectedNode);
            FolderTrees = currentTree;
            CurrentPath += selectedNode.Children.Count != 0 ? selectedNode.Path : string.Empty;
            _logger.LogError($"CurrentPath: {CurrentPath}");
        }
    }

    private void OnNodeExpand(TreeExpandEventArgs args)
    {
        var expandedNode = args.Value as FolderTree;
        if (expandedNode != null)
        {
            // Handle the node expand event
            Console.WriteLine($"Expanded node: {expandedNode.Name}");
        }
    }

    private async Task<string> GetFileContentAsync(FolderTree item)
    {
        var pathPlasticService = configuration.GetValue<string>(Constants.PlasticBaseUrlKey);
        var basePath = $"{pathPlasticService}api/v1/repos/{RepoName}";
        var fileBasePath = $"{basePath}/branches/main/contents";
        string path;
        if(!item.Path.Contains(RepoName))
            path = $"{fileBasePath}{item.Path}";
        else
            path = $"{fileBasePath}";

        var fileContent = await plasticServices.GetFolderTreeAsync(path);
        if (!string.IsNullOrEmpty(fileContent.Data.Content))
        {
            var codeContent = await plasticServices.GetFileContentAsyc(fileContent.Data.Content);
            return await Task.FromResult(codeContent);
        }

        return await Task.FromResult(string.Empty);
    }

    private async Task<List<FolderTree>> LoadChildrenAsync(FolderTree item)
    {
        Result<FolderTree> folderTree = new Result<FolderTree>();

        if (item != null)
        {
            var pathPlasticService = configuration.GetValue<string>(Constants.PlasticBaseUrlKey);
            var basePath = $"{pathPlasticService}api/v1/repos/{RepoName}";
            var fileBasePath = $"{basePath}/branches/main/contents";
            string path = $"{fileBasePath}{item.Path}";

            folderTree = await plasticServices.GetFolderTreeAsync(path);
            IsFile = folderTree.Data.Type == "file";
            if (IsFile)
            {
                CodeFileContent = await plasticServices.GetFileContentAsyc(folderTree.Data.Content);
                CodeFileName = folderTree.Data.Name;
                await ShowCode();
            }
        }
        else
            folderTree =  await Task.FromResult(folderTree);

        return folderTree?.Data.Children;
    }
  
    private class RepositoryWorkspace
    {
        public RepositoryResponseDto Repository { get; set; }
        public WorkspaceResponseDto Workspace { get; set; }
        public FolderTree Tree { get; set; }
    }
}
