@page "/Account/Register"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Radzen
@using Radzen.Blazor
@using TFGDevopsApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<h3>Register</h3>

    <RadzenCard Data="@Input" class="rz-my-12 rz-mx-auto rz-p-4 rz-p-md-12" style="max-width: 600px;">
        <StatusMessage Message="@Message" />
        <RadzenTemplateForm Data=@Input asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <RadzenFieldset>
                <RadzenRow>
                    <RadzenField Label="Email">
                        <RadzenText>Email</RadzenText>
                        <RadzenTextBox @bind-Value="Input.Email" Name="Email" />
                        <RadzenRequiredValidator Component="Input" Property="Email" Text="Email is required." />
                        <RadzenEmailValidator Component="Input" Property="Email" Text="Email is not valid." />
                    </RadzenField>
                </RadzenRow>
                <RadzenRow>
                <RadzenField Label="Password">
                    <RadzenText>Password</RadzenText>
                    <RadzenPassword @bind-Value="Input.Password" Name="Password" />
                    <RadzenRequiredValidator Component="Input" Property="Password" Text="Password is required." />
                    <RadzenStringLengthValidator Component="Input" Property="Password" Min="6" Max="10" Text="Password must be at least 6 and at max 10 characters long." />
                </RadzenField>
                </RadzenRow>
                <RadzenRow>
                <RadzenField Label="Confirm Password">
                    <RadzenText>Confirm Password</RadzenText>
                    <RadzenPassword @bind-Value="Input.ConfirmPassword" Name="ConfirmPassword" />
                    <RadzenCompareValidator Component="Input" Property="ConfirmPassword" CompareProperty="Password" Text="The password and confirmation password do not match." />
                </RadzenField>
                </RadzenRow>
                <RadzenStack Gap="10"/>
                <RadzenRow>
                    <RadzenButton Click="RegisterUser" ButtonType="ButtonType.Submit" Text="Register" />
                </RadzenRow>
            </RadzenFieldset>
        </RadzenTemplateForm>
  </RadzenCard>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private bool rememberMe;

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser()
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private void OnLogin()
    {
        RedirectManager.RedirectTo("Account/Login");
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Clave")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirmar Clave")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        public bool RememberMe { get; set; }
    }
}
