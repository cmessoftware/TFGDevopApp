//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.2.5.0 (NJsonSchema v9.13.37.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------






using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace TFGDevopsApp1.Core.Helpers
{
    public interface IMantisHTTPClient
    {
        string BaseUrl { get; set; }

        string AuthToken { get; set; }

        ConfigGetResponse ConfigGet(IEnumerable<string> option, long? project_id, long? user_id);
        ConfigGetResponse ConfigGet(string optionName, int? projectId = null, int? userId = null);
        Task<ConfigGetResponse> ConfigGetAsync(IEnumerable<string> option, long? project_id, long? user_id);
        Task<ConfigGetResponse> ConfigGetAsync(IEnumerable<string> option, long? project_id, long? user_id, CancellationToken cancellationToken);
        Task<ConfigGetResponse> ConfigGetAsync(string optionName, int? projectId = null, int? userId = null, CancellationToken cancellationToken = default);
        T ConfigGetEnum<T>(ConfigOption configOption, int? projectId = null, int? userId = null) where T : ConfigEnumOption, IConfigEnumOption, new();
        T ConfigGetEnum<T>(string optionName, int? projectId = null, int? userId = null) where T : ConfigEnumOption, IConfigEnumOption, new();
        ConfigEnumOption GetConfigEnumOption(ConfigAnyTypeOption configAnyTypeOption);
        T GetConfigEnumOption<T>(ConfigAnyTypeOption configAnyTypeOption) where T : IConfigEnumOption, new();
        ConfigStringOption GetConfigStringOption(ConfigAnyTypeOption configAnyTypeOption);
        void IssueAdd(Issue body);
        Task IssueAddAsync(Issue body);
        Task IssueAddAsync(Issue body, CancellationToken cancellationToken);
        void IssueDelete(long id);
        Task IssueDeleteAsync(long id);
        Task IssueDeleteAsync(long id, CancellationToken cancellationToken);
        CreateIssueResponse IssueGet(long id);
        Task<List<CreateIssueResponse>> IssueGetAsync();
        Task<CreateIssueResponse> IssueGetAsync(long id);
        Task<CreateIssueResponse> IssueGetAsync(long id, CancellationToken cancellationToken);
        LangGetResponse LangGet(IEnumerable<string> @string);
        Task<LangGetResponse> LangGetAsync(IEnumerable<string> @string);
        Task<LangGetResponse> LangGetAsync(IEnumerable<string> @string, CancellationToken cancellationToken);
        GetProjectResponse ProjectGet(long project_id);
        Task<GetProjectResponse> ProjectGetAsync(long project_id);
        Task<GetProjectResponse> ProjectGetAsync(long project_id, CancellationToken cancellationToken);
        UserAddResponse UserAdd(MantisUser body);
        Task<UserAddResponse> UserAddAsync(MantisUser body);
        Task<UserAddResponse> UserAddAsync(MantisUser body, CancellationToken cancellationToken);
        void UserDelete(long id);
        Task UserDeleteAsync(long id);
        Task UserDeleteAsync(long id, CancellationToken cancellationToken);
        UserResponse UserGetMe();
        Task<UserResponse> UserGetMeAsync();
        Task<UserResponse> UserGetMeAsync(CancellationToken cancellationToken);
    }
}